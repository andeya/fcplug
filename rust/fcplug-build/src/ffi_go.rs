pub(crate) const FILE_NAME: &'static str = "ffi.c.go";

pub(crate) const FILE_TPL: &'static str = r##########"// Code generated by fcplug. DO NOT EDIT.

package ${package}

/*
#cgo CFLAGS: -I.
#cgo LDFLAGS: -L. -l${c_header_name_base}

#include "${c_header_name_base}.h"
*/
import "C"
import (
	"reflect"
	"unsafe"

	"github.com/andeya/fcplug/go/gocall"
	"github.com/golang/protobuf/proto"
)

func messageToBuffer[T proto.Message](args proto.Message) (C.struct_Buffer, *gocall.ABIResult[T]) {
	var argBuf C.struct_Buffer
	b, res := gocall.Marshal[T](args)
	if res.IsErr() {
		return argBuf, res
	}
	argBuf.ptr = (*C.uint8_t)(unsafe.Pointer(&b[0]))
	argBuf.len = C.uintptr_t(len(b))
	argBuf.cap = C.uintptr_t(cap(b))
	return argBuf, nil
}

func bufferToResultAndFree[T proto.Message](resBuf C.struct_Buffer) *gocall.ABIResult[T] {
	defer C.free_buffer(resBuf)
	return gocall.Unmarshal[T](bufferToBytes(resBuf))
}

func bufferToBytes(buf C.struct_Buffer) []byte {
	return *(*[]byte)(unsafe.Pointer(&reflect.SliceHeader{
		Data: uintptr(unsafe.Pointer(buf.ptr)),
		Len:  int(buf.len),
		Cap:  int(buf.cap),
	}))
}

${fn_list}
"##########;

pub(crate) const FN_TPL: &'static str = r##########"
func C_${c_fn_name}[T proto.Message](args proto.Message) *gocall.ABIResult[T] {
	argBuf, res := messageToBuffer[T](args)
	if res.IsErr() {
		return res
	}
	return bufferToResultAndFree[T](C.${c_fn_name}(argBuf))
}
"##########;
