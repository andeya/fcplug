// Code generated by fcplug. DO NOT EDIT.
#![allow(warnings, clippy::all)]
#[derive(
    PartialOrd,
    Hash,
    Eq,
    Ord,
    Debug,
    Default,
    ::serde::Serialize,
    ::serde::Deserialize,
    Clone,
    PartialEq,
)]
pub struct Ping {
    pub msg: ::std::string::String,
}
#[::async_trait::async_trait]
impl ::pilota::thrift::Message for Ping {
    fn encode<T: ::pilota::thrift::TOutputProtocol>(
        &self,
        protocol: &mut T,
    ) -> ::std::result::Result<(), ::pilota::thrift::EncodeError> {
        #[allow(unused_imports)]
        use ::pilota::thrift::TOutputProtocolExt;
        let struct_ident = ::pilota::thrift::TStructIdentifier { name: "Ping" };

        protocol.write_struct_begin(&struct_ident)?;
        protocol.write_string_field(1, &&self.msg)?;
        protocol.write_field_stop()?;
        protocol.write_struct_end()?;
        Ok(())
    }

    fn decode<T: ::pilota::thrift::TInputProtocol>(
        protocol: &mut T,
    ) -> ::std::result::Result<Self, ::pilota::thrift::DecodeError> {
        let mut msg = None;

        let mut __pilota_decoding_field_id = None;

        protocol.read_struct_begin()?;
        if let Err(err) = (|| {
            loop {
                let field_ident = protocol.read_field_begin()?;
                if field_ident.field_type == ::pilota::thrift::TType::Stop {
                    break;
                }
                __pilota_decoding_field_id = field_ident.id;
                match field_ident.id {
                    Some(1) if field_ident.field_type == ::pilota::thrift::TType::Binary => {
                        msg = Some(protocol.read_string()?);
                    }
                    _ => {
                        protocol.skip(field_ident.field_type)?;
                    }
                }

                protocol.read_field_end()?;
            }
            Ok::<_, ::pilota::thrift::DecodeError>(())
        })() {
            if let Some(field_id) = __pilota_decoding_field_id {
                return Err(::pilota::thrift::DecodeError::new(
                    ::pilota::thrift::DecodeErrorKind::WithContext(::std::boxed::Box::new(err)),
                    format!("decode struct `Ping` field(#{}) failed", field_id),
                ));
            } else {
                return Err(err);
            }
        };
        protocol.read_struct_end()?;

        let Some(msg) = msg else {
            return Err(::pilota::thrift::DecodeError::new(
                ::pilota::thrift::DecodeErrorKind::InvalidData,
                "field msg is required".to_string(),
            ));
        };

        let data = Self { msg };
        Ok(data)
    }

    async fn decode_async<T: ::pilota::thrift::TAsyncInputProtocol>(
        protocol: &mut T,
    ) -> ::std::result::Result<Self, ::pilota::thrift::DecodeError> {
        let mut msg = None;

        let mut __pilota_decoding_field_id = None;

        protocol.read_struct_begin().await?;
        if let Err(err) = async {
            loop {
                let field_ident = protocol.read_field_begin().await?;
                if field_ident.field_type == ::pilota::thrift::TType::Stop {
                    break;
                }
                __pilota_decoding_field_id = field_ident.id;
                match field_ident.id {
                    Some(1) if field_ident.field_type == ::pilota::thrift::TType::Binary => {
                        msg = Some(protocol.read_string().await?);
                    }
                    _ => {
                        protocol.skip(field_ident.field_type).await?;
                    }
                }

                protocol.read_field_end().await?;
            }
            Ok::<_, ::pilota::thrift::DecodeError>(())
        }
        .await
        {
            if let Some(field_id) = __pilota_decoding_field_id {
                return Err(::pilota::thrift::DecodeError::new(
                    ::pilota::thrift::DecodeErrorKind::WithContext(::std::boxed::Box::new(err)),
                    format!("decode struct `Ping` field(#{}) failed", field_id),
                ));
            } else {
                return Err(err);
            }
        };
        protocol.read_struct_end().await?;

        let Some(msg) = msg else {
            return Err(::pilota::thrift::DecodeError::new(
                ::pilota::thrift::DecodeErrorKind::InvalidData,
                "field msg is required".to_string(),
            ));
        };

        let data = Self { msg };
        Ok(data)
    }

    fn size<T: ::pilota::thrift::TLengthProtocol>(&self, protocol: &mut T) -> usize {
        #[allow(unused_imports)]
        use ::pilota::thrift::TLengthProtocolExt;
        protocol.write_struct_begin_len(&::pilota::thrift::TStructIdentifier { name: "Ping" })
            + protocol.write_string_field_len(Some(1), &&self.msg)
            + protocol.write_field_stop_len()
            + protocol.write_struct_end_len()
    }
}
pub(super) trait RustFfi {
    fn echo_rs(req: ::fcplug::RustFfiArg<Ping>) -> ::fcplug::ABIResult<::fcplug::TBytes<Pong>>;
}
#[no_mangle]
#[inline]
pub extern "C" fn rustffi_echo_rs(req: ::fcplug::Buffer) -> ::fcplug::RustFfiResult {
    ::fcplug::RustFfiResult::from(<FfiImpl as RustFfi>::echo_rs(::fcplug::RustFfiArg::from(
        req,
    )))
}
#[derive(
    PartialOrd,
    Hash,
    Eq,
    Ord,
    Debug,
    Default,
    ::serde::Serialize,
    ::serde::Deserialize,
    Clone,
    PartialEq,
)]
pub struct Pong {
    pub msg: ::std::string::String,
}
#[::async_trait::async_trait]
impl ::pilota::thrift::Message for Pong {
    fn encode<T: ::pilota::thrift::TOutputProtocol>(
        &self,
        protocol: &mut T,
    ) -> ::std::result::Result<(), ::pilota::thrift::EncodeError> {
        #[allow(unused_imports)]
        use ::pilota::thrift::TOutputProtocolExt;
        let struct_ident = ::pilota::thrift::TStructIdentifier { name: "Pong" };

        protocol.write_struct_begin(&struct_ident)?;
        protocol.write_string_field(1, &&self.msg)?;
        protocol.write_field_stop()?;
        protocol.write_struct_end()?;
        Ok(())
    }

    fn decode<T: ::pilota::thrift::TInputProtocol>(
        protocol: &mut T,
    ) -> ::std::result::Result<Self, ::pilota::thrift::DecodeError> {
        let mut msg = None;

        let mut __pilota_decoding_field_id = None;

        protocol.read_struct_begin()?;
        if let Err(err) = (|| {
            loop {
                let field_ident = protocol.read_field_begin()?;
                if field_ident.field_type == ::pilota::thrift::TType::Stop {
                    break;
                }
                __pilota_decoding_field_id = field_ident.id;
                match field_ident.id {
                    Some(1) if field_ident.field_type == ::pilota::thrift::TType::Binary => {
                        msg = Some(protocol.read_string()?);
                    }
                    _ => {
                        protocol.skip(field_ident.field_type)?;
                    }
                }

                protocol.read_field_end()?;
            }
            Ok::<_, ::pilota::thrift::DecodeError>(())
        })() {
            if let Some(field_id) = __pilota_decoding_field_id {
                return Err(::pilota::thrift::DecodeError::new(
                    ::pilota::thrift::DecodeErrorKind::WithContext(::std::boxed::Box::new(err)),
                    format!("decode struct `Pong` field(#{}) failed", field_id),
                ));
            } else {
                return Err(err);
            }
        };
        protocol.read_struct_end()?;

        let Some(msg) = msg else {
            return Err(::pilota::thrift::DecodeError::new(
                ::pilota::thrift::DecodeErrorKind::InvalidData,
                "field msg is required".to_string(),
            ));
        };

        let data = Self { msg };
        Ok(data)
    }

    async fn decode_async<T: ::pilota::thrift::TAsyncInputProtocol>(
        protocol: &mut T,
    ) -> ::std::result::Result<Self, ::pilota::thrift::DecodeError> {
        let mut msg = None;

        let mut __pilota_decoding_field_id = None;

        protocol.read_struct_begin().await?;
        if let Err(err) = async {
            loop {
                let field_ident = protocol.read_field_begin().await?;
                if field_ident.field_type == ::pilota::thrift::TType::Stop {
                    break;
                }
                __pilota_decoding_field_id = field_ident.id;
                match field_ident.id {
                    Some(1) if field_ident.field_type == ::pilota::thrift::TType::Binary => {
                        msg = Some(protocol.read_string().await?);
                    }
                    _ => {
                        protocol.skip(field_ident.field_type).await?;
                    }
                }

                protocol.read_field_end().await?;
            }
            Ok::<_, ::pilota::thrift::DecodeError>(())
        }
        .await
        {
            if let Some(field_id) = __pilota_decoding_field_id {
                return Err(::pilota::thrift::DecodeError::new(
                    ::pilota::thrift::DecodeErrorKind::WithContext(::std::boxed::Box::new(err)),
                    format!("decode struct `Pong` field(#{}) failed", field_id),
                ));
            } else {
                return Err(err);
            }
        };
        protocol.read_struct_end().await?;

        let Some(msg) = msg else {
            return Err(::pilota::thrift::DecodeError::new(
                ::pilota::thrift::DecodeErrorKind::InvalidData,
                "field msg is required".to_string(),
            ));
        };

        let data = Self { msg };
        Ok(data)
    }

    fn size<T: ::pilota::thrift::TLengthProtocol>(&self, protocol: &mut T) -> usize {
        #[allow(unused_imports)]
        use ::pilota::thrift::TLengthProtocolExt;
        protocol.write_struct_begin_len(&::pilota::thrift::TStructIdentifier { name: "Pong" })
            + protocol.write_string_field_len(Some(1), &&self.msg)
            + protocol.write_field_stop_len()
            + protocol.write_struct_end_len()
    }
}
pub trait GoFfiCall {
    unsafe fn echo_go<T: Default>(req: ::fcplug::TBytes<Ping>) -> ::fcplug::ABIResult<T> {
        ::fcplug::ABIResult::from(goffi_echo_go(::fcplug::Buffer::from_vec(req.bytes)))
    }
}

pub(super) trait GoFfi {
    unsafe fn echo_go_set_result(go_ret: ::fcplug::RustFfiArg<Pong>) -> ::fcplug::GoFfiResult;
}
extern "C" {
    fn goffi_echo_go(req: ::fcplug::Buffer) -> ::fcplug::GoFfiResult;
}
#[no_mangle]
#[inline]
pub extern "C" fn goffi_echo_go_set_result(buf: ::fcplug::Buffer) -> ::fcplug::GoFfiResult {
    unsafe { <FfiImpl as GoFfi>::echo_go_set_result(::fcplug::RustFfiArg::from(buf)) }
}
trait Ffi: RustFfi + GoFfi + GoFfiCall {}

pub struct FfiImpl;

impl GoFfiCall for FfiImpl {}
impl Ffi for FfiImpl {}
