// automatically generated by the FlatBuffers compiler, do not modify


// @generated

extern crate flatbuffers;

use self::flatbuffers::{EndianScalar, Follow};


pub enum EchoRequestOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct EchoRequest<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EchoRequest<'a> {
    type Inner = EchoRequest<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> EchoRequest<'a> {
    pub const VT_DATA: flatbuffers::VOffsetT = 4;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        EchoRequest { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args EchoRequestArgs<'args>,
    ) -> flatbuffers::WIPOffset<EchoRequest<'bldr>> {
        let mut builder = EchoRequestBuilder::new(_fbb);
        if let Some(x) = args.data { builder.add_data(x); }
        builder.finish()
    }


    #[inline]
    pub fn data(&self) -> Option<&'a str> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EchoRequest::VT_DATA, None) }
    }
}

impl flatbuffers::Verifiable for EchoRequest<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier, pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>("data", Self::VT_DATA, false)?
            .finish();
        Ok(())
    }
}

pub struct EchoRequestArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<&'a str>>,
}

impl<'a> Default for EchoRequestArgs<'a> {
    #[inline]
    fn default() -> Self {
        EchoRequestArgs {
            data: None,
        }
    }
}

pub struct EchoRequestBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> EchoRequestBuilder<'a, 'b> {
    #[inline]
    pub fn add_data(&mut self, data: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EchoRequest::VT_DATA, data);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EchoRequestBuilder<'a, 'b> {
        let start = _fbb.start_table();
        EchoRequestBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<EchoRequest<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for EchoRequest<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("EchoRequest");
        ds.field("data", &self.data());
        ds.finish()
    }
}

pub enum EchoResponseOffset {}

#[derive(Copy, Clone, PartialEq)]
pub struct EchoResponse<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EchoResponse<'a> {
    type Inner = EchoResponse<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table::new(buf, loc) }
    }
}

impl<'a> EchoResponse<'a> {
    pub const VT_DATA: flatbuffers::VOffsetT = 4;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        EchoResponse { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args EchoResponseArgs<'args>,
    ) -> flatbuffers::WIPOffset<EchoResponse<'bldr>> {
        let mut builder = EchoResponseBuilder::new(_fbb);
        if let Some(x) = args.data { builder.add_data(x); }
        builder.finish()
    }


    #[inline]
    pub fn data(&self) -> Option<&'a str> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EchoResponse::VT_DATA, None) }
    }
}

impl flatbuffers::Verifiable for EchoResponse<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier, pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<&str>>("data", Self::VT_DATA, false)?
            .finish();
        Ok(())
    }
}

pub struct EchoResponseArgs<'a> {
    pub data: Option<flatbuffers::WIPOffset<&'a str>>,
}

impl<'a> Default for EchoResponseArgs<'a> {
    #[inline]
    fn default() -> Self {
        EchoResponseArgs {
            data: None,
        }
    }
}

pub struct EchoResponseBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}

impl<'a: 'b, 'b> EchoResponseBuilder<'a, 'b> {
    #[inline]
    pub fn add_data(&mut self, data: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EchoResponse::VT_DATA, data);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EchoResponseBuilder<'a, 'b> {
        let start = _fbb.start_table();
        EchoResponseBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<EchoResponse<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for EchoResponse<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("EchoResponse");
        ds.field("data", &self.data());
        ds.finish()
    }
}
